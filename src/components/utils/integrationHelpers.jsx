import { InvokeLLM } from "@/api/integrations";
import { News } from "@/api/entities";
import { retry, createRateLimiter } from "./retry";

let llmDownUntil = 0;
function isLLMAvailable() {
  return Date.now() >= llmDownUntil;
}
function markLLMDown(minutes = 5) {
  llmDownUntil = Date.now() + minutes * 60 * 1000;
}

const llmLimiter = createRateLimiter(1400);

export async function invokeLLMWithRetry({ prompt, response_json_schema }) {
  await llmLimiter();
  const res = await retry(
    () => InvokeLLM({ prompt, response_json_schema }),
    { retries: 3, baseDelayMs: 900, factor: 2 }
  );
  return res;
}

function normalizeNewsPayload(data) {
  const safe = { ...data };
  safe.title = String(safe.title || "").slice(0, 200).trim();
  safe.summary = String(safe.summary || "").slice(0, 800).trim();

  if (safe.content) {
    safe.content = String(safe.content || "").slice(0, 4000);
  }

  if (Array.isArray(safe.tags)) {
    safe.tags = safe.tags.map(t => String(t).slice(0, 40)).slice(0, 8);
  } else {
    safe.tags = [];
  }

  if (safe.publication_date) {
    const d = new Date(safe.publication_date);
    safe.publication_date = !isNaN(d.getTime())
      ? d.toISOString().split("T")[0]
      : null;
  } else {
    safe.publication_date = null;
  }

  if (!safe.publication_date) {
    throw new Error("DATA DE PUBLICA√á√ÉO N√ÉO ENCONTRADA - Not√≠cia rejeitada");
  }

  safe.source_name = safe.source_name ? String(safe.source_name).slice(0, 120) : undefined;
  safe.external_url = safe.external_url ? String(safe.external_url).slice(0, 500) : undefined;
  safe.category = safe.category || "contabil";
  safe.importance = safe.importance || "media";
  safe.is_highlighted = !!safe.is_highlighted;

  return safe;
}

export async function safeCreateNews(newsData) {
  const payload = normalizeNewsPayload(newsData);
  console.log("   [safeCreateNews] Not√≠cia normalizada para cria√ß√£o:", payload);
  console.log("   [safeCreateNews] Tentando criar not√≠cia:", { title: payload.title.substring(0, Math.min(payload.title.length, 50)), source: payload.source_name });

  try {
    const created = await News.create(payload);
    console.log("   [safeCreateNews] ‚úÖ Not√≠cia criada com sucesso no BD, ID:", created.id);
    return created;
  } catch (error) {
    console.error("   [safeCreateNews] ‚ùå Erro ao tentar criar not√≠cia no BD:", error);
    console.error("   [safeCreateNews] Payload que falhou:", payload);
    throw error;
  }
}

function ensureString(v, fallback = "") {
  if (typeof v === "string") return v;
  if (v == null) return fallback;
  try {
    return String(v);
  } catch {
    return fallback;
  }
}
function cap(str, n) {
  const s = ensureString(str, "");
  return s.length > n ? s.slice(0, n) : s;
}
function sanitizeImportance(v) {
  const allowed = ["alta", "media", "baixa"];
  const s = ensureString(v, "media").toLowerCase();
  return allowed.includes(s) ? s : "media";
}
function ensureArrayOfStrings(arr, maxItems = 8, itemLen = 40) {
  if (!Array.isArray(arr)) return [];
  return arr.map((t) => cap(t, itemLen)).slice(0, maxItems);
}

export async function generateNewsViaLLM({ sourceName, sourceDescription, topic, defaultCategory, sourceWebsite }) {
  if (!isLLMAvailable()) {
    throw new Error("LLM indispon√≠vel temporariamente - aguarde 5 minutos");
  }

  console.log(`   üîç Iniciando busca de not√≠cia real sobre: ${topic}`);
  
  let dateResponse;
  let searchMethod;

  // ===== ESTRAT√âGIA 1: Se tem website, buscar direto no site =====
  if (sourceWebsite && sourceWebsite.trim() !== '') {
    console.log(`   üåê Tentando buscar no site: ${sourceWebsite}`);
    searchMethod = 'website';
    
    const dateExtractionPrompt = `
Acesse o site: ${sourceWebsite}

TAREFA CR√çTICA:
1. Encontre a not√≠cia MAIS RECENTE que seja ESPECIFICAMENTE sobre: ${topic}
2. A not√≠cia DEVE ter sido publicada nos √öLTIMOS 3 DIAS
3. A not√≠cia DEVE SER DIRETAMENTE sobre o t√≥pico (N√ÉO aceite not√≠cias tangenciais ou gen√©ricas)
4. Extraia a DATA EXATA de publica√ß√£o
5. Extraia a URL COMPLETA E ESPEC√çFICA da not√≠cia
6. Identifique o IDIOMA da not√≠cia (ingl√™s ou portugu√™s)

VALIDA√á√ÉO DE RELEV√ÇNCIA:
- Se a not√≠cia N√ÉO for DIRETAMENTE sobre "${topic}", retorne found: false
- Se for sobre outro assunto (mesmo que relacionado), retorne found: false
- Exemplo: Se buscar "reforma tribut√°ria" e encontrar "ICMS gen√©rico", rejeite (found: false)
- Exemplo: Se buscar "eSocial" e encontrar "CLT gen√©rica", rejeite (found: false)

INSTRU√á√ïES T√âCNICAS:
- Procure por: meta tags (article:published_time), JSON-LD (datePublished), tags <time>
- Data no formato YYYY-MM-DD
- URL espec√≠fica da not√≠cia (n√£o homepage)
- **REGRA: SEM DATA = SEM NOT√çCIA (found: false)**
- **REGRA: NOT√çCIA FORA DO T√ìPICO = REJEITAR (found: false)**

Responda em JSON.
`;

    try {
      dateResponse = await invokeLLMWithRetry({
        prompt: dateExtractionPrompt,
        response_json_schema: {
          type: "object",
          properties: {
            found: { type: "boolean" },
            publication_date: { type: "string" },
            news_url: { type: "string" },
            news_title: { type: "string" },
            news_language: { type: "string", enum: ["pt", "en", "other"] },
            confidence: { type: "string", enum: ["high", "medium", "low"] },
            relevance_check: { 
              type: "string", 
              description: "Breve explica√ß√£o de por que a not√≠cia √â ou N√ÉO √â relevante para o t√≥pico" 
            }
          }
        }
      });
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Falha ao acessar website, tentando busca web...`);
      dateResponse = null;
    }
  }

  // ===== ESTRAT√âGIA 2: Se n√£o tem website OU falhou, fazer busca web gen√©rica =====
  if (!dateResponse || !dateResponse.found || !dateResponse.publication_date) {
    console.log(`   üîé Fazendo busca web gen√©rica...`);
    searchMethod = 'web_search';
    
    const webSearchPrompt = `
Fa√ßa uma busca na web por not√≠cias ESPEC√çFICAS sobre:
- T√≥pico EXATO: ${topic}
- Fonte sugerida: ${sourceName}
- Categoria: ${defaultCategory}

CRIT√âRIOS OBRIGAT√ìRIOS:
1. A not√≠cia DEVE ser ESPECIFICAMENTE sobre "${topic}"
2. Publicada nos √öLTIMOS 3 DIAS
3. Fonte confi√°vel (governo, portais grandes)
4. Data extra√≠da com ALTA confian√ßa
5. URL ESPEC√çFICA da not√≠cia

VALIDA√á√ÉO RIGOROSA DE RELEV√ÇNCIA:
- Se a not√≠cia N√ÉO for DIRETAMENTE sobre "${topic}", N√ÉO RETORNE
- Rejeite not√≠cias tangenciais ou gen√©ricas
- Exemplo: Se buscar "IFRS" e encontrar "CPC gen√©rico", rejeite
- Exemplo: Se buscar "reforma tribut√°ria" e encontrar "PIS/COFINS normal", rejeite

IDIOMA:
- Identifique se a not√≠cia est√° em portugu√™s (pt) ou ingl√™s (en)

**REGRA CR√çTICA: SE N√ÉO ENCONTRAR NOT√çCIA QUE ATENDA TODOS OS CRIT√âRIOS, retorne found: false**

Responda em JSON.
`;

    try {
      dateResponse = await invokeLLMWithRetry({
        prompt: webSearchPrompt,
        response_json_schema: {
          type: "object",
          properties: {
            found: { type: "boolean" },
            publication_date: { type: "string" },
            news_url: { type: "string" },
            news_title: { type: "string" },
            news_language: { type: "string", enum: ["pt", "en", "other"] },
            confidence: { type: "string", enum: ["high", "medium", "low"] },
            source_found: { type: "string" },
            relevance_check: { 
              type: "string", 
              description: "Por que essa not√≠cia √© relevante para o t√≥pico espec√≠fico" 
            }
          }
        }
      });
    } catch (error) {
      console.error(`   ‚ùå Erro na busca web:`, error.message);
      throw new Error(`Not√≠cia rejeitada: Falha ao buscar not√≠cias na web - ${error.message}`);
    }
  }

  // ===== VALIDA√á√ÉO 1: Not√≠cia encontrada? =====
  if (!dateResponse || !dateResponse.found) {
    console.log(`   ‚ùå REJEITADA: N√£o encontrou not√≠cia recente sobre o t√≥pico espec√≠fico`);
    throw new Error(`Not√≠cia rejeitada: Nenhuma not√≠cia dos √∫ltimos 3 dias encontrada sobre ${topic} de ${sourceName}`);
  }

  // ===== VALIDA√á√ÉO 2: Data de publica√ß√£o OBRIGAT√ìRIA =====
  if (!dateResponse.publication_date || dateResponse.publication_date.trim() === '') {
    console.log(`   ‚ùå REJEITADA: Data de publica√ß√£o n√£o encontrada`);
    throw new Error(`Not√≠cia rejeitada: Data de publica√ß√£o n√£o encontrada`);
  }

  // ===== VALIDA√á√ÉO 3: Confian√ßa alta ou m√©dia? =====
  if (dateResponse.confidence === "low") {
    console.log(`   ‚ùå REJEITADA: Confian√ßa baixa na data extra√≠da`);
    throw new Error("Not√≠cia rejeitada: Confian√ßa baixa na data extra√≠da");
  }

  // ===== VALIDA√á√ÉO 4: Data nos √∫ltimos 3 dias? =====
  const pubDate = new Date(dateResponse.publication_date);
  
  if (isNaN(pubDate.getTime())) {
    console.log(`   ‚ùå REJEITADA: Data inv√°lida: ${dateResponse.publication_date}`);
    throw new Error(`Not√≠cia rejeitada: Data de publica√ß√£o inv√°lida - ${dateResponse.publication_date}`);
  }

  const today = new Date();
  today.setHours(23, 59, 59, 999);
  
  const threeDaysAgo = new Date();
  threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
  threeDaysAgo.setHours(0, 0, 0, 0);
  
  if (pubDate < threeDaysAgo || pubDate > today) {
    const diffDays = Math.floor((today - pubDate) / (1000 * 60 * 60 * 24));
    console.log(`   ‚ùå REJEITADA: Not√≠cia fora do per√≠odo permitido (${diffDays} dias atr√°s)`);
    throw new Error(`Not√≠cia rejeitada: Data ${dateResponse.publication_date} est√° fora do per√≠odo dos √∫ltimos 3 dias`);
  }

  // ===== VALIDA√á√ÉO 5: URL espec√≠fica da not√≠cia? =====
  const newsUrl = dateResponse.news_url || '';
  if (!newsUrl || newsUrl.trim() === '') {
    console.log(`   ‚ùå REJEITADA: URL da not√≠cia n√£o fornecida`);
    throw new Error("Not√≠cia rejeitada: URL espec√≠fica da not√≠cia n√£o encontrada");
  }

  const isGenericUrl = (
    newsUrl === sourceWebsite ||
    newsUrl.endsWith('/') ||
    newsUrl.match(/\/(noticias|news|artigos|blog)\/?$/i)
  );

  if (isGenericUrl) {
    console.log(`   ‚ùå REJEITADA: URL gen√©rica fornecida: ${newsUrl}`);
    throw new Error("Not√≠cia rejeitada: URL fornecida √© gen√©rica, n√£o espec√≠fica da not√≠cia");
  }

  const realPublicationDate = dateResponse.publication_date;
  const newsTitle = dateResponse.news_title || '';
  const newsLanguage = dateResponse.news_language || 'pt';
  const isEnglish = newsLanguage === 'en';

  const diffDays = Math.floor((today - pubDate) / (1000 * 60 * 60 * 24));
  console.log(`   ‚úÖ Not√≠cia v√°lida encontrada via ${searchMethod}!`);
  console.log(`   üìÖ Data: ${realPublicationDate} (${diffDays} dia(s) atr√°s)`);
  console.log(`   üîó URL espec√≠fica: ${newsUrl}`);
  console.log(`   üì∞ T√≠tulo: ${newsTitle.substring(0, 60)}...`);
  console.log(`   üåê Idioma: ${newsLanguage === 'en' ? 'Ingl√™s' : 'Portugu√™s'}`);
  console.log(`   ‚≠ê Confian√ßa: ${dateResponse.confidence}`);
  if (dateResponse.relevance_check) {
    console.log(`   ‚úîÔ∏è Relev√¢ncia: ${dateResponse.relevance_check.substring(0, 100)}...`);
  }

  // ===== Gerar conte√∫do adaptado da not√≠cia COM TRADU√á√ÉO E CLASSIFICA√á√ÉO =====
  const contentPrompt = `
Voc√™ √© um EDITOR ESPECIALIZADO em not√≠cias cont√°beis, fiscais e tribut√°rias brasileiras.

CONTEXTO DA NOT√çCIA:
‚Ä¢ T√≠tulo: ${newsTitle}
‚Ä¢ Fonte: ${sourceName}
‚Ä¢ Data: ${realPublicationDate}
‚Ä¢ URL: ${newsUrl}
‚Ä¢ T√≥pico: ${topic}
‚Ä¢ Idioma Original: ${isEnglish ? 'INGL√äS' : 'PORTUGU√äS'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
PASSO 1: REESCREVER (E TRADUZIR SE NECESS√ÅRIO)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
${isEnglish ? '‚ö†Ô∏è ATEN√á√ÉO: Esta not√≠cia est√° em INGL√äS. Voc√™ DEVE TRADUZI-LA COMPLETAMENTE para portugu√™s brasileiro.' : ''}

Reescreva a not√≠cia de forma PROFISSIONAL:
‚Ä¢ T√≠tulo (m√°x 120 chars): Claro e direto ${isEnglish ? '- TRADUZIDO' : ''}
‚Ä¢ Resumo (m√°x 400 chars): Ess√™ncia da not√≠cia ${isEnglish ? '- TRADUZIDO' : ''}
‚Ä¢ Conte√∫do (m√°x 4000 chars): Detalhes pr√°ticos, impactos e a√ß√µes ${isEnglish ? '- TRADUZIDO' : ''}
‚Ä¢ Tags (3-5): Termos t√©cnicos relevantes

${isEnglish ? '‚ö†Ô∏è IMPORTANTE: TODO o conte√∫do deve estar em PORTUGU√äS. Adicione a tag "not√≠cia original em ingl√™s" automaticamente.' : ''}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
PASSO 2: CLASSIFICAR CATEGORIA (MAIS ESPEC√çFICA)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Op√ß√µes: reforma_tributaria, ifrs, usgaap, folha_pagamento, tributaria, fiscal, contabil

REGRA: Escolha a MAIS ESPEC√çFICA que se encaixe no conte√∫do.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
PASSO 3: CLASSIFICAR IMPORT√ÇNCIA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
**NOVA ABORDAGEM: Primeiro JUSTIFIQUE, depois CLASSIFIQUE**

Analise a not√≠cia e responda estas perguntas:

1. Esta not√≠cia cria uma NOVA OBRIGA√á√ÉO ou altera uma existente? (Sim/N√£o)
2. Existe um PRAZO URGENTE (< 30 dias)? (Sim/N√£o)
3. O impacto √© UNIVERSAL (afeta >50% das empresas)? (Sim/N√£o)
4. H√° mudan√ßa em LEI, DECRETO ou NORMA OBRIGAT√ìRIA? (Sim/N√£o)
5. √â apenas informativo/esclarecimento SEM impacto pr√°tico? (Sim/N√£o)

REGRA SIMPLES:
‚Ä¢ Se respondeu SIM para quest√µes 1, 2, 3 ou 4 ‚Üí **ALTA**
‚Ä¢ Se √© apenas informativo (quest√£o 5 = SIM) ‚Üí **BAIXA**
‚Ä¢ Caso contr√°rio ‚Üí **M√âDIA**

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
FORMATO DE RESPOSTA (JSON):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
{
  "title": "...",
  "summary": "...",
  "content": "...",
  "category": "...",
  "importance_analysis": {
    "creates_new_obligation": true/false,
    "urgent_deadline": true/false,
    "universal_impact": true/false,
    "changes_mandatory_rule": true/false,
    "only_informative": true/false
  },
  "importance": "alta/media/baixa",
  "tags": ["tag1", "tag2"...],
  "is_highlighted": true/false
}
`;

  const schema = {
    type: "object",
    properties: {
      title: { type: "string" },
      summary: { type: "string" },
      content: { type: "string" },
      category: { 
        type: "string", 
        enum: ["contabil", "fiscal", "folha_pagamento", "tributaria", "reforma_tributaria", "ifrs", "usgaap"]
      },
      importance_analysis: {
        type: "object",
        properties: {
          creates_new_obligation: { type: "boolean" },
          urgent_deadline: { type: "boolean" },
          universal_impact: { type: "boolean" },
          changes_mandatory_rule: { type: "boolean" },
          only_informative: { type: "boolean" }
        }
      },
      importance: { type: "string", enum: ["alta", "media", "baixa"] },
      tags: { type: "array", items: { type: "string" } },
      is_highlighted: { type: "boolean" },
    },
    required: ["title", "summary", "content", "category", "importance_analysis", "importance", "tags", "is_highlighted"]
  };

  let res = null;

  try {
    res = await invokeLLMWithRetry({ prompt: contentPrompt, response_json_schema: schema });

    if (!res || !ensureString(res.title).trim() || !ensureString(res.summary).trim()) {
      res = {
        title: newsTitle || `${topic} - ${sourceName}`,
        summary: `Atualiza√ß√£o recente sobre ${topic} publicada por ${sourceName} em ${realPublicationDate}.`,
        content: `Not√≠cia encontrada em ${newsUrl}. Acesse o link para mais detalhes.`,
        category: defaultCategory || "contabil",
        importance_analysis: {
          creates_new_obligation: false,
          urgent_deadline: false,
          universal_impact: false,
          changes_mandatory_rule: false,
          only_informative: true
        },
        importance: "media",
        tags: [defaultCategory, sourceName.split(' ')[0]],
        is_highlighted: false
      };
    }
  } catch (_err) {
    markLLMDown(5);
    throw new Error("Falha ao gerar conte√∫do da not√≠cia via LLM");
  }

  const title = cap(ensureString(res.title).trim(), 120);
  const summary = cap(ensureString(res.summary).trim(), 400);
  const content = cap(ensureString(res.content).trim(), 4000);
  const category = ensureString(res.category) || defaultCategory || "contabil";
  
  // Aplicar regra simples de import√¢ncia baseada na an√°lise
  let importance = "media"; // default
  if (res.importance_analysis) {
    const analysis = res.importance_analysis;
    if (analysis.creates_new_obligation || analysis.urgent_deadline || 
        analysis.universal_impact || analysis.changes_mandatory_rule) {
      importance = "alta";
    } else if (analysis.only_informative) {
      importance = "baixa";
    }
  } else {
    importance = sanitizeImportance(res.importance);
  }
  
  let tags = ensureArrayOfStrings(res.tags);
  
  // Adicionar tag "not√≠cia original em ingl√™s" se for o caso
  if (isEnglish && !tags.includes("not√≠cia original em ingl√™s")) {
    tags.push("not√≠cia original em ingl√™s");
  }
  
  const is_highlighted = !!res.is_highlighted;

  console.log(`   üéØ An√°lise de import√¢ncia:`, res.importance_analysis);
  console.log(`   üéØ Classifica√ß√£o de import√¢ncia: ${importance.toUpperCase()}`);
  console.log(`   üóÇÔ∏è Classifica√ß√£o de categoria: ${category}`);
  if (isEnglish) {
    console.log(`   üåê Not√≠cia TRADUZIDA do ingl√™s para portugu√™s`);
  }

  return {
    title,
    summary,
    content: content || summary,
    category,
    importance,
    tags,
    is_highlighted,
    source_name: ensureString(sourceName).slice(0, 120),
    publication_date: realPublicationDate,
    external_url: newsUrl,
  };
}